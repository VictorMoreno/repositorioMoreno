// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Peliculas.API;

#nullable disable

namespace Peliculas.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241126155429_Datos PeliculasActores")]
    partial class DatosPeliculasActores
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biografia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Actores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biografia = "Leonardo DiCaprio es un actor y productor estadounidense conocido por películas como 'Titanic', 'Inception' y 'The Revenant'. Ganó un Óscar por 'The Revenant'.",
                            FechaNacimiento = new DateTime(1974, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/39c562aa-c83d-4bc7-97aa-8895dc46880c.jpg",
                            Nombre = "Leonardo DiCaprio"
                        },
                        new
                        {
                            Id = 2,
                            Biografia = "Meryl Streep es una reconocida actriz estadounidense, famosa por su habilidad para interpretar distintos personajes. Ha ganado tres premios Óscar y es una de las actrices más nominadas en la historia del cine.",
                            FechaNacimiento = new DateTime(1949, 6, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/ade14658-7f47-496a-ace0-7c1d0414f468.jpg",
                            Nombre = "Meryl Streep"
                        },
                        new
                        {
                            Id = 3,
                            Biografia = "Robert De Niro es un actor y productor estadounidense, famoso por sus papeles en 'Taxi Driver', 'Raging Bull' y 'Goodfellas'. Ha ganado dos premios Óscar.",
                            FechaNacimiento = new DateTime(1943, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/b0ff03ae-86fa-426b-9ce2-9e4975678026.jpg",
                            Nombre = "Robert De Niro"
                        },
                        new
                        {
                            Id = 4,
                            Biografia = "Scarlett Johansson es una actriz estadounidense conocida por su papel en el Universo Cinematográfico de Marvel como 'Black Widow' y en películas como 'Lost in Translation'.",
                            FechaNacimiento = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/ef905ad6-7cb3-46d9-adfc-e2961efd0437.jpg",
                            Nombre = "Scarlett Johansson"
                        },
                        new
                        {
                            Id = 5,
                            Biografia = "Tom Hanks es un actor y productor estadounidense conocido por sus papeles en 'Forrest Gump', 'Saving Private Ryan' y 'Cast Away'. Ha ganado dos premios Óscar consecutivos.",
                            FechaNacimiento = new DateTime(1956, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/91510ed1-a7dd-4592-bbc4-e3baa12285c0.jpg",
                            Nombre = "Tom Hanks"
                        },
                        new
                        {
                            Id = 6,
                            Biografia = "Natalie Portman es una actriz y productora estadounidense-israelí, conocida por su papel en 'Black Swan', por el que ganó un Óscar, y su participación en la saga 'Star Wars'.",
                            FechaNacimiento = new DateTime(1981, 6, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/3531dfef-80bd-4e62-b40b-d7f5e89ddb27.jpg",
                            Nombre = "Natalie Portman"
                        },
                        new
                        {
                            Id = 7,
                            Biografia = "Brad Pitt es un actor y productor estadounidense famoso por sus papeles en 'Fight Club', 'Inglourious Basterds' y 'Once Upon a Time in Hollywood', por el que ganó un Óscar.",
                            FechaNacimiento = new DateTime(1963, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/fed532b0-86d5-4e3d-9978-cbaf00f53bd2.jpg",
                            Nombre = "Brad Pitt"
                        },
                        new
                        {
                            Id = 8,
                            Biografia = "Emma Stone es una actriz estadounidense conocida por su papel en 'La La Land', por el cual ganó un Óscar. También es conocida por su trabajo en 'Easy A' y 'The Amazing Spider-Man'.",
                            FechaNacimiento = new DateTime(1988, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/626b3111-fd53-40f9-a88c-02dcc38587a2.jpg",
                            Nombre = "Emma Stone"
                        },
                        new
                        {
                            Id = 9,
                            Biografia = "Morgan Freeman es un actor y narrador estadounidense conocido por su voz distintiva y papeles en 'The Shawshank Redemption', 'Se7en' y 'Driving Miss Daisy'. Ganó un Óscar en 2005.",
                            FechaNacimiento = new DateTime(1937, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/76ac4765-8bcd-4075-8bf2-25c601e0a891.jpeg",
                            Nombre = "Morgan Freeman"
                        },
                        new
                        {
                            Id = 10,
                            Biografia = "Charlize Theron es una actriz y productora sudafricana conocida por su papel en 'Monster', por el que ganó un Óscar, y su actuación en películas de acción como 'Mad Max: Fury Road'.",
                            FechaNacimiento = new DateTime(1975, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/620ba7f7-38ac-4727-9a7c-8f3f7dcfb47e.jpg",
                            Nombre = "Charlize Theron"
                        },
                        new
                        {
                            Id = 11,
                            Biografia = "Margot Robbie es una actriz y productora australiana conocida por sus papeles en películas como 'The Wolf of Wall Street', 'I, Tonya' y 'Barbie'. Ha sido nominada a varios premios, incluyendo el Óscar, y es reconocida por su versatilidad en papeles dramáticos y cómicos.",
                            FechaNacimiento = new DateTime(1990, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/8FA42CB3-2A52-4C12-A5D6-EED127CA6139.jpg",
                            Nombre = "Margot Robbie"
                        },
                        new
                        {
                            Id = 12,
                            Biografia = "Ruth Negga es una actriz irlandesa-etíope conocida por su actuación en 'Loving', por la que recibió una nominación al Óscar. También ha destacado en series como 'Preacher' y 'Agents of S.H.I.E.L.D.'.",
                            FechaNacimiento = new DateTime(1981, 1, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/50D498BD-39F2-42C5-A6B8-781DA33CB01D.jpg",
                            Nombre = "Ruth Negga"
                        },
                        new
                        {
                            Id = 13,
                            Biografia = "Tommy Lee Jones es un actor y director estadounidense ganador del Óscar, conocido por papeles en películas como 'Men in Black', 'No Country for Old Men' y 'The Fugitive'. Es reconocido por su carácter y estilo distintivo en la pantalla.",
                            FechaNacimiento = new DateTime(1946, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/01CF2324-A586-4A1E-9583-C4A35FFDA084.jpg",
                            Nombre = "Tommy Lee Jones"
                        },
                        new
                        {
                            Id = 14,
                            Biografia = "Sandra Bullock es una actriz y productora estadounidense, conocida por su versatilidad en una amplia gama de géneros, desde la comedia en 'Miss Congeniality' hasta el drama en 'The Blind Side', película que le valió un Óscar. También ha sido aclamada por sus papeles en 'Gravity' y 'Bird Box'.",
                            FechaNacimiento = new DateTime(1964, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/9F0150C5-6584-45D0-9EFC-9E0F78B49BAF.jpg",
                            Nombre = "Sandra Bullock"
                        },
                        new
                        {
                            Id = 15,
                            Biografia = "Channing Tatum es un actor, productor y bailarín estadounidense, conocido por sus papeles en películas como 'Magic Mike', 'Step Up' y '21 Jump Street'. Su habilidad para la danza le ha ayudado a destacarse, además de su presencia en comedias y dramas.",
                            FechaNacimiento = new DateTime(1980, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/ED6F7AB2-28AB-4AA1-8F0B-F988B4594D5F.jpg",
                            Nombre = "Channing Tatum"
                        },
                        new
                        {
                            Id = 16,
                            Biografia = "George Clooney es un actor, director y productor estadounidense, reconocido mundialmente por su trabajo en películas como 'Ocean's Eleven', 'Gravity', 'The Descendants' y 'Up in the Air'. Ha ganado múltiples premios, incluidos los premios Óscar, y es conocido por su activismo y trabajo humanitario.",
                            FechaNacimiento = new DateTime(1961, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/74E76C1E-EC0E-4AB2-BA80-A83CE2385235.jpg",
                            Nombre = "George Clooney"
                        },
                        new
                        {
                            Id = 17,
                            Biografia = "Timothée Chalamet es un actor estadounidense, conocido por sus papeles en 'Call Me by Your Name', 'Little Women', y su participación en 'Dune'. Aclamado por su habilidad actoral, Chalamet ha sido nominado a varios premios importantes, incluidos los premios Óscar.",
                            FechaNacimiento = new DateTime(1995, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/B5F73E68-8140-4904-9D25-C764CECD0199.jpg",
                            Nombre = "Timothée Chalamet"
                        },
                        new
                        {
                            Id = 18,
                            Biografia = "Zendaya Maree Stoermer Coleman, conocida profesionalmente como Zendaya, es una actriz y cantante estadounidense famosa por su papel en la serie de Disney Channel 'Shake It Up' y su papel en películas como 'Spider-Man: Homecoming' y 'Dune'. Además de su carrera en la actuación, Zendaya es una influyente figura en la moda y activismo social.",
                            FechaNacimiento = new DateTime(1996, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/5D506761-8211-4C40-A4AB-CCC2582A335C.jpg",
                            Nombre = "Zendaya"
                        },
                        new
                        {
                            Id = 20,
                            Biografia = "Kate Winslet es una actriz inglesa ganadora de múltiples premios, incluyendo un Óscar por su papel en 'The Reader'. Es conocida por su capacidad de adaptarse a roles diversos, como en 'Titanic', 'Eternal Sunshine of the Spotless Mind', y en la saga de Avatar como la Dr. Ronal.",
                            FechaNacimiento = new DateTime(1975, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/A77A6BEA-0FDD-49BE-83DB-93F6B81BEAC3.jpg",
                            Nombre = "Kate Winslet"
                        },
                        new
                        {
                            Id = 19,
                            Biografia = "Cliff Curtis es un actor neozelandés conocido por sus roles en películas de acción y dramas. Ha trabajado en varias producciones importantes, incluyendo 'Training Day', 'The Dark Horse', y 'Avatar'. En la saga de Avatar, interpreta a Tonowari, el líder de la tribu de los Metkayina.",
                            FechaNacimiento = new DateTime(1968, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/FC2B363B-0FBE-44A3-94FD-9D08E5C72C51.jpg",
                            Nombre = "Cliff Curtis"
                        },
                        new
                        {
                            Id = 22,
                            Biografia = "Tom Cruise es uno de los actores más famosos y exitosos de Hollywood, conocido por su papel icónico como Ethan Hunt en la saga 'Misión: Imposible'. Además de ser un actor destacado, ha sido productor de muchas de sus películas y es conocido por sus impresionantes acrobacias y dedicación a sus roles.",
                            FechaNacimiento = new DateTime(1962, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/7671EC80-98D6-403A-AEC7-4C8A3A7DE2E7.jpg",
                            Nombre = "Tom Cruise"
                        },
                        new
                        {
                            Id = 21,
                            Biografia = "Hayley Atwell es una actriz británica conocida por su papel de Peggy Carter en el Universo Cinematográfico de Marvel. Su presencia en 'Misión: Imposible - Sentencia Mortal Parte Dos' marca una nueva colaboración en el cine de acción, donde interpreta a un personaje clave dentro de la trama.",
                            FechaNacimiento = new DateTime(1982, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/E4E6F0A2-BDEA-44C4-956A-D86E02CCFA45.jpg",
                            Nombre = "Hayley Atwell"
                        },
                        new
                        {
                            Id = 25,
                            Biografia = "Brie Larson es una actriz, directora y productora estadounidense conocida por su papel como Carol Danvers/Captain Marvel en el Universo Cinematográfico de Marvel. Ganó el Premio de la Academia a la Mejor Actriz por su actuación en 'Room'. Además de su carrera actoral, Larson también ha incursionado en la dirección de películas.",
                            FechaNacimiento = new DateTime(1989, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/54CEFD17-5189-46EE-81B1-AC93F0A42CAB.jpg",
                            Nombre = "Brie Larson"
                        },
                        new
                        {
                            Id = 24,
                            Biografia = "Teyonah Parris es una actriz estadounidense conocida por su papel como Monica Rambeau en la serie de Disney+ 'WandaVision' y ahora en 'The Marvels'. Parris ha sido aclamada por su trabajo en la televisión y el cine, destacándose por su versatilidad y talento.",
                            FechaNacimiento = new DateTime(1987, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/CC6C7B1C-BED7-434A-8F39-404077C11F5F.jpg",
                            Nombre = "Teyonah Parris"
                        },
                        new
                        {
                            Id = 23,
                            Biografia = "Iman Vellani es una joven actriz canadiense conocida por interpretar a Kamala Khan/Ms. Marvel en la serie de Disney+ 'Ms. Marvel'. 'The Marvels' es su participación en el Universo Cinematográfico de Marvel, donde compartirá pantalla con otras heroínas del MCU.",
                            FechaNacimiento = new DateTime(2002, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/DFD1D3B8-EE44-4B63-A335-B16CE508C80A.jpg",
                            Nombre = "Iman Vellani"
                        },
                        new
                        {
                            Id = 26,
                            Biografia = "Lady Gaga es una cantante, compositora y actriz estadounidense, conocida por su estilo musical ecléctico y su presencia en el escenario. Ha ganado múltiples premios, incluidos varios premios Grammy, y su actuación en 'A Star Is Born' (2018) le valió una nominación al Óscar. En 'Joker: Locura de a Dos', interpretará a Harley Quinn.",
                            FechaNacimiento = new DateTime(1986, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/DD1BAEBB-57E2-4D97-834E-79503110E782.jpg",
                            Nombre = "Lady Gaga"
                        },
                        new
                        {
                            Id = 27,
                            Biografia = "Zazie Beetz es una actriz alemana-estadounidense conocida por sus papeles en 'Atlanta', 'Deadpool 2' y 'Joker'. En 'Joker', interpretó a Sophie Dumond, un personaje central que tiene una conexión crucial con Arthur Fleck/Joker. Beetz ha sido elogiada por su talento y versatilidad.",
                            FechaNacimiento = new DateTime(1991, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/757387BF-FA8B-40DA-8F34-BC9156071FFD.jpg",
                            Nombre = "Zazie Beetz"
                        },
                        new
                        {
                            Id = 28,
                            Biografia = "Joaquin Phoenix es un actor, productor y activista estadounidense, conocido por sus papeles en películas como 'Gladiator', 'Her' y 'The Master'. Su interpretación del Joker en la película 'Joker' (2019) le valió el Premio Óscar a Mejor Actor, convirtiéndose en uno de los actores más aclamados de su generación.",
                            FechaNacimiento = new DateTime(1974, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/7A3B28F1-2CDD-4F5D-9F57-DCD64C2B63A3.jpg",
                            Nombre = "Joaquin Phoenix"
                        },
                        new
                        {
                            Id = 29,
                            Biografia = "Lucas Till es un actor estadounidense conocido por sus papeles en 'X-Men: First Class' (2011) como Havok, y por protagonizar la serie de televisión 'MacGyver' (2016-2021) como Angus MacGyver. También ha trabajado en películas como 'Battle: Los Angeles' (2011) y 'The Disappointments Room' (2016).",
                            FechaNacimiento = new DateTime(1990, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/BE15B21C-AE30-4E8D-A4B8-DCD28C027000.jpg",
                            Nombre = "Lucas Till"
                        },
                        new
                        {
                            Id = 30,
                            Biografia = "Jason Momoa es un actor, productor y director estadounidense conocido por sus papeles en la serie de televisión 'Game of Thrones' como Khal Drogo, y como el superhéroe Aquaman en el universo cinematográfico de DC. También ha trabajado en otras producciones como 'Frontier', 'The Red Road' y 'See'. Su presencia en pantalla y su carisma lo han convertido en uno de los actores más populares de la actualidad.",
                            FechaNacimiento = new DateTime(1979, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "https://localhost:7290/actores/4DACD85F-6223-4AF4-B146-C8115958ED90.jpg",
                            Nombre = "Jason Momoa"
                        });
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Cine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Point>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.ToTable("Cines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Cines Callao",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (-3.705912 40.419829)")
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Yelmo Cines Ideal",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (-3.7065112 40.41357)")
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Cinesa Diagonal Mar",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (2.2140153 41.4096507)")
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Cines Renoir Plaza de España",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (-3.7159609 40.4243981)")
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Cines Verdi Barcelona",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (2.1542843 41.4039621)")
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Ocine Granollers",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (2.2866108 41.6067659)")
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Kinépolis Valencia",
                            Ubicacion = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (-0.4287164 39.4778583)")
                        });
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Genero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Acción"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Aventura"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Catástrofe"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Ciencia Ficción"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Comedia"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Documentales"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Drama"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Fantasia"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Terror"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Romantico"
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "Historica"
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "Suspense"
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "Espionaje"
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "Crimen"
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "Thriller"
                        });
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Pelicula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("EnCines")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaLanzamiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resumen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Peliculas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2022, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/ea9fd07a-1fb5-4eb7-a01a-1c27266c2309.png",
                            Resumen = "Una épica historia sobre el exceso, la decadencia y los sueños rotos en el Hollywood de los años 20, donde la transición del cine mudo al sonoro sacude a la industria.",
                            Titulo = "Babylon",
                            Trailer = "https://www.youtube.com/watch?v=gBil8RpweBE&pp=ygUYYmFieWxvbiB0cmFpbGVyIGVzcGHDsW9s"
                        },
                        new
                        {
                            Id = 2,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2019, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/14a89f1e-d997-46ec-ae77-37b43118b00c.jpg",
                            Resumen = "Un actor de televisión y su doble de riesgo se encuentran con los eventos de 1969 en Hollywood mientras las estrellas de cine se enfrentan a un cambio cultural.",
                            Titulo = "Érase una vez en… Hollywood",
                            Trailer = "https://www.youtube.com/watch?v=J0rFGJV3cYw"
                        },
                        new
                        {
                            Id = 3,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2019, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/eecfa05e-7968-474a-93c4-3f5b24e5cb66.jpg",
                            Resumen = "Un astronauta viaja a los rincones más distantes del sistema solar para encontrar a su padre y resolver un misterio que amenaza la supervivencia de la Tierra.",
                            Titulo = "Ad Astra",
                            Trailer = "https://www.youtube.com/watch?v=2hy4clp3IMM"
                        },
                        new
                        {
                            Id = 4,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2022, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/0acee9d1-94df-4229-aab0-bf7c308e2933.jpg",
                            Resumen = "Una escritora de novelas románticas es secuestrada por un millonario que busca un tesoro perdido en una isla remota, y es rescatada por su modelo de portada.",
                            Titulo = "La ciudad perdida",
                            Trailer = "https://www.youtube.com/watch?v=DWq5cjkxEQQ"
                        },
                        new
                        {
                            Id = 5,
                            EnCines = false,
                            FechaLanzamiento = new DateTime(2025, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "",
                            Resumen = "Dos solitarios se ven involucrados en el mismo trabajo, que pronto se convierte en una carrera por la supervivencia.",
                            Titulo = "Wolves",
                            Trailer = "https://www.youtube.com/watch?v=Ti_7suoHmRQ"
                        },
                        new
                        {
                            Id = 6,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/98e8356c-3214-454f-b6c5-81f82de778ff.jpg",
                            Resumen = "La segunda parte de la épica adaptación de Dune, donde Paul Atreides busca venganza y un legado que cambiará el universo.",
                            Titulo = "Dune: Parte dos",
                            Trailer = "https://www.youtube.com/watch?v=6OmJF6VjKMA"
                        },
                        new
                        {
                            Id = 7,
                            EnCines = false,
                            FechaLanzamiento = new DateTime(2025, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/aad70b69-1dd1-4b5a-8e4a-1941c00fe96f.jpg",
                            Resumen = "La siguiente entrega de la saga de ciencia ficción de Pandora, explorando nuevas regiones del planeta y enfrentándose a amenazas desconocidas.",
                            Titulo = "Avatar 3",
                            Trailer = "https://www.youtube.com/watch?v=YXtWPVFk5TQ"
                        },
                        new
                        {
                            Id = 8,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/ec9ebb58-73f3-4a0e-ae57-2e7de11da751.jpg",
                            Resumen = "Ethan Hunt continúa su lucha contra una nueva amenaza global en la segunda parte de esta entrega de alta tensión y acción.",
                            Titulo = "Misión: Imposible - Sentencia Mortal Parte Dos",
                            Trailer = "https://www.youtube.com/watch?v=8jRMVhGwy0M"
                        },
                        new
                        {
                            Id = 9,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/c2eb8dbc-9a1f-4bbe-a8d5-346999a51022.jpg",
                            Resumen = "Las heroínas del universo Marvel, Carol Danvers, Kamala Khan y Monica Rambeau, unen fuerzas para enfrentar una amenaza cósmica.",
                            Titulo = "The Marvels",
                            Trailer = "https://www.youtube.com/watch?v=gdSGIf8kbhg"
                        },
                        new
                        {
                            Id = 10,
                            EnCines = true,
                            FechaLanzamiento = new DateTime(2024, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Poster = "https://localhost:7290/peliculas/c900cffe-1828-46f1-9893-99b86ec064ab.png",
                            Resumen = "Arthur Fleck regresa como el Joker en una secuela que explora su relación con Harley Quinn y el oscuro descenso de ambos.",
                            Titulo = "Joker: locura de a dos",
                            Trailer = "https://www.youtube.com/watch?v=7SZfThvjt5I"
                        });
                });

            modelBuilder.Entity("Peliculas.API.Entidades.PeliculasActores", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Personaje")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ActorId", "PeliculaId");

                    b.HasIndex("PeliculaId");

                    b.ToTable("PeliculasActores");

                    b.HasData(
                        new
                        {
                            ActorId = 7,
                            PeliculaId = 1,
                            Orden = 0,
                            Personaje = "Jack Conrad"
                        },
                        new
                        {
                            ActorId = 11,
                            PeliculaId = 1,
                            Orden = 0,
                            Personaje = "Nellie LaRoy"
                        },
                        new
                        {
                            ActorId = 7,
                            PeliculaId = 2,
                            Orden = 0,
                            Personaje = "Cliff Booth"
                        },
                        new
                        {
                            ActorId = 1,
                            PeliculaId = 2,
                            Orden = 0,
                            Personaje = "Rick Dalton"
                        },
                        new
                        {
                            ActorId = 11,
                            PeliculaId = 2,
                            Orden = 0,
                            Personaje = "Sharon Tate"
                        },
                        new
                        {
                            ActorId = 7,
                            PeliculaId = 3,
                            Orden = 0,
                            Personaje = "Roy McBride"
                        },
                        new
                        {
                            ActorId = 12,
                            PeliculaId = 3,
                            Orden = 0,
                            Personaje = "Helen Lantos"
                        },
                        new
                        {
                            ActorId = 13,
                            PeliculaId = 3,
                            Orden = 0,
                            Personaje = "Clifford McBride"
                        },
                        new
                        {
                            ActorId = 7,
                            PeliculaId = 4,
                            Orden = 0,
                            Personaje = "Jack Trainer"
                        },
                        new
                        {
                            ActorId = 14,
                            PeliculaId = 4,
                            Orden = 0,
                            Personaje = "Loretta Sage"
                        },
                        new
                        {
                            ActorId = 15,
                            PeliculaId = 4,
                            Orden = 0,
                            Personaje = "Dash McMahon"
                        },
                        new
                        {
                            ActorId = 30,
                            PeliculaId = 5,
                            Orden = 0,
                            Personaje = "Connor"
                        },
                        new
                        {
                            ActorId = 29,
                            PeliculaId = 5,
                            Orden = 0,
                            Personaje = "Cayden Richards"
                        },
                        new
                        {
                            ActorId = 17,
                            PeliculaId = 6,
                            Orden = 0,
                            Personaje = "Paul Atreides"
                        },
                        new
                        {
                            ActorId = 18,
                            PeliculaId = 6,
                            Orden = 0,
                            Personaje = "Chani"
                        },
                        new
                        {
                            ActorId = 19,
                            PeliculaId = 7,
                            Orden = 0,
                            Personaje = "Tonowari"
                        },
                        new
                        {
                            ActorId = 20,
                            PeliculaId = 7,
                            Orden = 0,
                            Personaje = "Ronal"
                        },
                        new
                        {
                            ActorId = 22,
                            PeliculaId = 8,
                            Orden = 0,
                            Personaje = "Ethan Hunt"
                        },
                        new
                        {
                            ActorId = 21,
                            PeliculaId = 8,
                            Orden = 0,
                            Personaje = "Grace"
                        },
                        new
                        {
                            ActorId = 23,
                            PeliculaId = 9,
                            Orden = 0,
                            Personaje = "Kamala Khan"
                        },
                        new
                        {
                            ActorId = 24,
                            PeliculaId = 9,
                            Orden = 0,
                            Personaje = "Monica Parris"
                        },
                        new
                        {
                            ActorId = 25,
                            PeliculaId = 9,
                            Orden = 0,
                            Personaje = "Carol Danvers"
                        },
                        new
                        {
                            ActorId = 28,
                            PeliculaId = 10,
                            Orden = 0,
                            Personaje = "Arthur Fleck"
                        },
                        new
                        {
                            ActorId = 26,
                            PeliculaId = 10,
                            Orden = 0,
                            Personaje = "Lee Quinzel"
                        },
                        new
                        {
                            ActorId = 27,
                            PeliculaId = 10,
                            Orden = 0,
                            Personaje = "Sophie Dumond"
                        });
                });

            modelBuilder.Entity("Peliculas.API.Entidades.PeliculasCines", b =>
                {
                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.HasKey("CineId", "PeliculaId");

                    b.HasIndex("PeliculaId");

                    b.ToTable("PeliculasCines");

                    b.HasData(
                        new
                        {
                            CineId = 4,
                            PeliculaId = 1
                        },
                        new
                        {
                            CineId = 1,
                            PeliculaId = 2
                        },
                        new
                        {
                            CineId = 3,
                            PeliculaId = 3
                        },
                        new
                        {
                            CineId = 7,
                            PeliculaId = 4
                        },
                        new
                        {
                            CineId = 2,
                            PeliculaId = 5
                        },
                        new
                        {
                            CineId = 5,
                            PeliculaId = 6
                        },
                        new
                        {
                            CineId = 1,
                            PeliculaId = 7
                        },
                        new
                        {
                            CineId = 5,
                            PeliculaId = 8
                        },
                        new
                        {
                            CineId = 3,
                            PeliculaId = 9
                        },
                        new
                        {
                            CineId = 7,
                            PeliculaId = 10
                        });
                });

            modelBuilder.Entity("Peliculas.API.Entidades.PeliculasGeneros", b =>
                {
                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.HasKey("GeneroId", "PeliculaId");

                    b.HasIndex("PeliculaId");

                    b.ToTable("PeliculasGeneros");

                    b.HasData(
                        new
                        {
                            GeneroId = 7,
                            PeliculaId = 1
                        },
                        new
                        {
                            GeneroId = 5,
                            PeliculaId = 1
                        },
                        new
                        {
                            GeneroId = 11,
                            PeliculaId = 1
                        },
                        new
                        {
                            GeneroId = 7,
                            PeliculaId = 2
                        },
                        new
                        {
                            GeneroId = 5,
                            PeliculaId = 2
                        },
                        new
                        {
                            GeneroId = 4,
                            PeliculaId = 3
                        },
                        new
                        {
                            GeneroId = 7,
                            PeliculaId = 3
                        },
                        new
                        {
                            GeneroId = 2,
                            PeliculaId = 4
                        },
                        new
                        {
                            GeneroId = 5,
                            PeliculaId = 4
                        },
                        new
                        {
                            GeneroId = 1,
                            PeliculaId = 4
                        },
                        new
                        {
                            GeneroId = 12,
                            PeliculaId = 5
                        },
                        new
                        {
                            GeneroId = 1,
                            PeliculaId = 5
                        },
                        new
                        {
                            GeneroId = 1,
                            PeliculaId = 6
                        },
                        new
                        {
                            GeneroId = 2,
                            PeliculaId = 6
                        },
                        new
                        {
                            GeneroId = 7,
                            PeliculaId = 6
                        },
                        new
                        {
                            GeneroId = 4,
                            PeliculaId = 7
                        },
                        new
                        {
                            GeneroId = 8,
                            PeliculaId = 7
                        },
                        new
                        {
                            GeneroId = 1,
                            PeliculaId = 8
                        },
                        new
                        {
                            GeneroId = 13,
                            PeliculaId = 8
                        },
                        new
                        {
                            GeneroId = 1,
                            PeliculaId = 9
                        },
                        new
                        {
                            GeneroId = 2,
                            PeliculaId = 9
                        },
                        new
                        {
                            GeneroId = 4,
                            PeliculaId = 9
                        },
                        new
                        {
                            GeneroId = 7,
                            PeliculaId = 10
                        },
                        new
                        {
                            GeneroId = 14,
                            PeliculaId = 10
                        },
                        new
                        {
                            GeneroId = 15,
                            PeliculaId = 10
                        });
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int>("Puntuacion")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PeliculaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Peliculas.API.Entidades.PeliculasActores", b =>
                {
                    b.HasOne("Peliculas.API.Entidades.Actor", "Actor")
                        .WithMany("PeliculasActores")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Peliculas.API.Entidades.Pelicula", "Pelicula")
                        .WithMany("PeliculasActores")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("Peliculas.API.Entidades.PeliculasCines", b =>
                {
                    b.HasOne("Peliculas.API.Entidades.Cine", "Cine")
                        .WithMany("PeliculasCines")
                        .HasForeignKey("CineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Peliculas.API.Entidades.Pelicula", "Pelicula")
                        .WithMany("PeliculasCines")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cine");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("Peliculas.API.Entidades.PeliculasGeneros", b =>
                {
                    b.HasOne("Peliculas.API.Entidades.Genero", "Genero")
                        .WithMany("PeliculasGeneros")
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Peliculas.API.Entidades.Pelicula", "Pelicula")
                        .WithMany("PeliculasGeneros")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");

                    b.Navigation("Pelicula");
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Rating", b =>
                {
                    b.HasOne("Peliculas.API.Entidades.Pelicula", "Pelicula")
                        .WithMany()
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelicula");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Actor", b =>
                {
                    b.Navigation("PeliculasActores");
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Cine", b =>
                {
                    b.Navigation("PeliculasCines");
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Genero", b =>
                {
                    b.Navigation("PeliculasGeneros");
                });

            modelBuilder.Entity("Peliculas.API.Entidades.Pelicula", b =>
                {
                    b.Navigation("PeliculasActores");

                    b.Navigation("PeliculasCines");

                    b.Navigation("PeliculasGeneros");
                });
#pragma warning restore 612, 618
        }
    }
}
